priority -50

extends texmath

global !p

def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]

	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	
	rows = int_val(rows)
	cols = int_val(cols)

	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	
	snip.buffer[snip.line] = ''
	
	final_str = old_spacing + "\\begin{tabular}{" + " ".join(['$' + str(i + 1) for i in range(cols)]) + "}\n"
	
	for i in range(rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

		final_str += " \\\\\\\n"

	final_str += old_spacing + "\\hline\n\\end{tabular}\n$0"

	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

	snip.buffer[snip.line] = ''
	
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\"

	snip.expand_anon(final_str)

texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
		return first != ignore
	except StopIteration:
		return False


endglobal

snippet "b(egin)?" "begin{} / end{}" br
\begin{${1:something}}
	${0:${VISUAL}}
\end{$1}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
	$0
\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r  
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
    \centering
    \caption{${2:caption}}
    \label{tab_${3:label}}
    gentbl${4}x${5}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${2:htpb}]
    \centering
    \includegraphics[width=${3:0.8}\linewidth]{${4:name.ext}}
    \caption{${4/(\w+)\.\w+/\u$1/}$0}
    \label{fig_${4/(\w+)\.\w+/$1/}}
\end{figure}
endsnippet

snippet enum "Enumerate" b
\begin{enumerate}
    \item $0
\end{enumerate}
endsnippet

snippet item "Itemize" b
\begin{itemize}
    \item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
    \item[$1] $0
\end{description}
endsnippet

snippet it "Individual item" b
\item $0
endsnippet

snippet part "Part" b
\part{${1:part name}}%
\label{prt_${2:${1/(\w+)|\W+/(?1:\L$0\E:_)/ga}}}

$0
endsnippet

snippet cha "Chapter" b
\chapter{${1:chapter name}}%
\label{cha_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec "Section" b
\section{${1:${VISUAL:section name}}}%
\label{sec_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sec* "Section" bA
\section*{${1:${VISUAL:section name}}}%
\label{sec_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet


snippet sub "Subsection" b
\subsection{${1:${VISUAL:subsection name}}}%
\label{sub_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet sub* "Subsection" bA 
\subsection*{${1:${VISUAL:subsection name}}}%
\label{sub_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub "Subsubsection" b
\subsubsection{${1:${VISUAL:subsubsection name}}}%
\label{ssub_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ssub* "Subsubsection" bA
\subsubsection*{${1:${VISUAL:subsubsection name}}}%
\label{ssub_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet par "Paragraph"
\paragraph{${1:${VISUAL:paragraph name}}}%
\label{par_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet subp "Subparagraph"
\subparagraph{${1:${VISUAL:subparagraph name}}}%
\label{par_${2:${1/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}

$0
endsnippet

snippet ac "Acroynm normal" b
\ac{${1:acronym}}
$0
endsnippet

snippet acl "Acroynm expanded" b
\acl{${1:acronym}}
$0
endsnippet

snippet ni "Non-indented paragraph" b
\noindent
$0
endsnippet

snippet pac "Package" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet lp "Long parenthesis" i
\left(${1:${VISUAL:contents}}\right)$0
endsnippet

snippet "mint(ed)?( (\S+))?" "Minted code typeset" br
\begin{listing}
\begin{minted}[linenos,numbersep=5pt,frame=lines,framesep=2mm]{${1:`!p
snip.rv = match.group(3) if match.group(2) is not None else "language"`}}
${2:${VISUAL:code}}
\end{minted}
\caption{${3:caption name}}
\label{lst_${4:${3/\\\w+\{(.*?)\}|\\(.)|(\w+)|([^\w\\]+)/(?4:_:\L$1$2$3\E)/ga}}}
\end{listing}

$0
endsnippet

#==========Custom Math Snippets============

snippet mk "Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
\]
$0
endsnippet

snippet ali "align numered" bA
\begin{align}
    ${1:${VISUAL}}
\end{align}
endsnippet

snippet ali* "align unnumered" bA
\begin{align*}
    ${1:${VISUAL}}
\end{align*}
endsnippet

snippet eqnn "equation numered" bA
\begin{equation}
    ${1:${VISUAL}}\label{eq_${2}}
\end{equation}
endsnippet

snippet eq* "equation unnumered" bA
\begin{equation*}
    ${1:${VISUAL}}
\end{equation*}
endsnippet

snippet cntr "center" bA
\begin{center}
    ${1:${VISUAL}}
\end{center}
endsnippet

snippet mtrx "matrix" bA
\begin{matrix}
    ${1:${VISUAL}}
\end{matrix}
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^{2}
endsnippet

context "math()"
snippet cb "^3" iA
^{3}
endsnippet

context "math()"
snippet sp "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


# ========== Custom snippet ==========
snippet header "Custom header" bA
\documentclass[12pt,letterpaper]{article}
\usepackage{/home/earving/Plantillas/HeaderMD}
%\setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}

\title{\textsc{}}
\author{\thanks{}}
\affil{}
\date{}

\begin{document}
%\maketitle
%\tableofcontents

$0



\end{document}
endsnippet

snippet fnoo "Foot note" iA
\footnote{${1:${VISUAL}}} $0
endsnippet

snippet mnoo "margin note" iA
\marginnote{\vrule\hspace{0.05cm}\begin{minipage}{2cm}{\footnotesize ${1:${VISUAL}} }\end{minipage}}[${2:0}cm] $0
endsnippet

snippet vrule "vertical rule" i
\vrule width ${1:0.4}pt \hspace{${2:0.2}cm}
endsnippet

snippet %% "Percentage" iA
\%
endsnippet

snippet -- "Long line" iA
---
endsnippet

snippet ... "Dots" iA
\ldots
endsnippet

snippet ref "reference" i
\ref{${1}} $0
endsnippet

snippet hrule "horizontal rule" b
\rule{${1}\textwidth}{${2:0.4}pt}
endsnippet

snippet minipage "minipage" b
\begin{minipage}{${1}\textwidth}
    ${2:${VISUAL}}
\end{minipage}
endsnippet

snippet block "block" b
\hspace*{0.1\textwidth}{\textcolor{gray}{\vrule width 5pt}\hspace{0.2cm}\begin{minipage}{0.8\linewidth}
\textsf{${1:${VISUAL}}}
\end{minipage}}
endsnippet

snippet colorblock "color block" b
\hspace*{0.1\textwidth}{\textcolor{gray}{\vrule width 5pt}\hspace{0.2cm}\colorbox{lightgray}{\begin{minipage}{0.8\linewidth}
\textsf{${1:${VISUAL}}}
\end{minipage}}}
endsnippet

snippet subequations "subequations" b
\begin{subequations}
\begin{equation}
	    ${1:${VISUAL}}
\end{equation}\label{eq_${2}}${3:\nonumber}
\end{subequations}
endsnippet

snippet fittable "fit with table" b
\begin{table}[${1:htpb}]
    \centering
    \caption{${2:caption}}
    \label{tab_${3:label}}
\resizebox{${4}\textwidth}{!}{%
gentbl${5}x${6}
}
\end{table}
endsnippet

snippet multcol "multicol" i
\multicolumn{${1}}{${2:c}}{${3:VISUAL}}
endsnippet

#snippet box "Box"
#`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
#│ $1 │
#`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
#$0
#endsnippet

snippet box "Bodex text" i
\boxed{\text{${1:${VISUAL}}}} $0
endsnippet

snippet chem "Chem formula" i
\ch{${1}} $0
endsnippet

# ========== FONT ==========

snippet ~~ "underline" iA
\underline{${1:${VISUAL}}} $0
endsnippet

snippet ** "textbf" iA
\textbf{${1:${VISUAL}}} $0
endsnippet

snippet ++ "textit" iA
\textit{${1:${VISUAL}}} $0
endsnippet

snippet textmdb "textmdb" i
\textmd{${1:${VISUAL}}} $0
endsnippet
snippet texttt "texttt" i
\texttt{${1:${VISUAL}}} $0
endsnippet

snippet textsf "textsf" i
\textsf{${1:${VISUAL}}} $0
endsnippet

snippet textrm "textrm" i
\textrm{${1:${VISUAL}}} $0
endsnippet

snippet textup "textup" i
\textup{${1:${VISUAL}}} $0
endsnippet

snippet textsl "textsl" i
\textsl{${1:${VISUAL}}} $0
endsnippet

snippet textsc "textsc" i
\textsc{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet tt "textt" iA
\text{${1:${VISUAL}}} $0
endsnippet

# ========== ARROWS ==========
priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet
priority 100

context "math()"
snippet -> "to" iA
\to 
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
from sympy.abc import a, b

x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# vim:ft=snippets:
