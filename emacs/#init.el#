
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(require 'package)
(package-initialize)

(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)

;(add-to-list 'load-path "~/.emacs.d/evil")
;(require 'evil)
;(evil-mode 1)

;;(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;;(load-theme 'nord t)

;(when (version<= "26.0.50" emacs-version )
;  (global-display-line-numbers-mode))

;; Create a variable for our preferred tab width
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)


;; remember cursor position, for emacs 25.1 or later
(save-place-mode 1)

;;Save history
(savehist-mode 1)

;;Stop creating backup~ files
(setq make-backup-files nil)

;;No start up screen
(setq inhibit-startup-screen t)

;;Itial message
(setq initial-scratch-message "")


;; change all prompts to y or n
(fset 'yes-or-no-p 'y-or-n-p)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(TeX-command-list
   (quote
	(("LatexMk" "latexmk %(-PDF)%S%(mode) %(file-line-error) %(extraopts) %t" TeX-run-latexmk nil
	  (plain-tex-mode latex-mode doctex-mode)
	  :help "Run LatexMk")
	 ("CustomLatex" "sh ~/.scripts/pdflatexcompile.sh %t" TeX-run-command nil
	  (plain-tex-mode latex-mode))
	 ("LatexMk" "latexmk %(-PDF)%S%(mode) %(file-line-error) %(extraopts) %t" TeX-run-latexmk nil
	  (plain-tex-mode latex-mode doctex-mode)
	  :help "Run LatexMk")
	 ("TeX" "%(PDF)%(tex) %(file-line-error) %`%(extraopts) %S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
	  (plain-tex-mode texinfo-mode ams-tex-mode)
	  :help "Run plain TeX")
	 ("LaTeX" "%`%l%(mode)%' %T" TeX-run-TeX nil
	  (latex-mode doctex-mode)
	  :help "Run LaTeX")
	 ("Makeinfo" "makeinfo %(extraopts) %t" TeX-run-compile nil
	  (texinfo-mode)
	  :help "Run Makeinfo with Info output")
	 ("Makeinfo HTML" "makeinfo %(extraopts) --html %t" TeX-run-compile nil
	  (texinfo-mode)
	  :help "Run Makeinfo with HTML output")
	 ("AmSTeX" "amstex %(PDFout) %`%(extraopts) %S%(mode)%' %t" TeX-run-TeX nil
	  (ams-tex-mode)
	  :help "Run AMSTeX")
	 ("ConTeXt" "%(cntxcom) --once --texutil %(extraopts) %(execopts)%t" TeX-run-TeX nil
	  (context-mode)
	  :help "Run ConTeXt once")
	 ("ConTeXt Full" "%(cntxcom) %(extraopts) %(execopts)%t" TeX-run-TeX nil
	  (context-mode)
	  :help "Run ConTeXt until completion")
	 ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
	 ("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber")
	 ("View" "%V" TeX-run-discard-or-function t t :help "Run Viewer")
	 ("Print" "%p" TeX-run-command t t :help "Print the file")
	 ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
	 ("File" "%(o?)dvips %d -o %f " TeX-run-dvips t t :help "Generate PostScript file")
	 ("Dvips" "%(o?)dvips %d -o %f " TeX-run-dvips nil t :help "Convert DVI file to PostScript")
	 ("Dvipdfmx" "dvipdfmx %d" TeX-run-dvipdfmx nil t :help "Convert DVI file to PDF with dvipdfmx")
	 ("Ps2pdf" "ps2pdf %f" TeX-run-ps2pdf nil t :help "Convert PostScript file to PDF")
	 ("Glossaries" "makeglossaries %s" TeX-run-command nil t :help "Run makeglossaries to create glossary file")
	 ("Index" "makeindex %s" TeX-run-index nil t :help "Run makeindex to create index file")
	 ("upMendex" "upmendex %s" TeX-run-index t t :help "Run upmendex to create index file")
	 ("Xindy" "texindy %s" TeX-run-command nil t :help "Run xindy to create index file")
	 ("Check" "lacheck %s" TeX-run-compile nil
	  (latex-mode)
	  :help "Check LaTeX file for correctness")
	 ("ChkTeX" "chktex -v6 %s" TeX-run-compile nil
	  (latex-mode)
	  :help "Check LaTeX file for common mistakes")
	 ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
	 ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
	 ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files")
	 ("Other" "" TeX-run-command t t :help "Run an arbitrary command"))))
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "white"])
 '(custom-safe-themes
   (quote
	("0301a26dedfda81ca220ad6169588b5408884e7b4a5363f3e6a0e98d5c65a257" "07fd10ee6f325025412aa19c531f3e2f0d26865b9d684c9a14e96c5364cc51f4" default)))
 '(doc-view-continuous t)
 '(font-use-system-font t)
 '(global-display-line-numbers-mode t)
 '(package-selected-packages
   (quote
	(company flyspell-correct-ivy counsel autopair latex-extra auctex latex-pretty-symbols yasnippet-snippets yasnippet highlight-indent-guides)))
 '(preview-TeX-style-dir nil)
 '(preview-auto-cache-preamble t)
 '(preview-default-option-list (quote ("displaymath" "textmath" "footnotes" "showbox")))
 '(preview-fast-conversion t)
 '(show-paren-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (when no-ssl
    (warn "\
Your version of Emacs does not support SSL connections,
which is unsafe because it allows man-in-the-middle attacks.
There are two things you can do about this warning:
1. Install an Emacs version that does support SSL and be safe.
2. Remove this warning from your init file so you won't see it again."))
  ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
(package-initialize)

;;Indent highlight
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(add-hook 'text-mode-hook 'highlight-indent-guides-mode)

;;autopair
(require 'autopair)
(autopair-global-mode)

(load "/home/earving/.emacs.d/auctex-config.el")
(load "/home/earving/.emacs.d/latex-config.el")
;(load "/home/earving/.emacs.d/aspell-config.el")
(load "/home/earving/.emacs.d/flyspell-config.el")

;; ivy config
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")
(setq ivy-re-builders-alist
      '((read-file-name-internal . ivy--regex-fuzzy)
        (t . ivy--regex-plus)))
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-find-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)


(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
;(require 'ewal)
;; theme
;;(setq ewal-wal-cache-dir "/home/earving/.cache/wal")
;;(setq ewal-load-ewal-colors t)
;;(load-theme 'ewal-spacemacs-modern t)
(load-theme 'spacemacs-light t)
;;(enable-theme 'ewal-spacemacs-modern)

;;(require 'ewal-evil-cursors)
;;(ewal-evil-cursors-get-emacs-colors :apply t)

;;(when (ewal-load-wal-colors)
;;  (ewal-get-spacemacs-theme-colors t)
;;  (ewal-get-emacs-evil-cursors-colors t))

(setq org-ellipsis " ↴")
(require 'org-bullets)
(setq  org-bullets-bullet-list '("◉" "◎" "♠" "○" "►" "◇"))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
